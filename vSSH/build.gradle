/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample C++ project to get you started.
 * For more details on building C++ applications and libraries, please refer to https://docs.gradle.org/8.3/userguide/building_cpp_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the cpp-application plugin to add support for building C++ executables
    id 'cpp-application'

    // Apply the cpp-unit-test plugin to add support for building and running C++ test executables
    id 'cpp-unit-test'
}

// Set the target operating system and architecture for this application
application {
    
    targetMachines = [
        machines.linux.x86_64,
        machines.windows.x86, machines.windows.x86_64,
        machines.macOS.x86_64
    ]
    
    // depends on the public headers in the inode library project
    // dependencies {
    //     implementation project(':inode')
    // }
    
    // for every binary file, configure compiler and linker flags
    binaries.configureEach {

        def os = System.getProperty("os.name")

        // enable additional warning reporting
        compileTask.get() compilerArgs.add('-Wall')
        // treat ALL warnings as errors --- Fix your warnings!
        compileTask.get().compilerArgs.add('-Werror')
        // determine which C++ standard to use
        compileTask.get().compilerArgs.add('-std=c++20')
        // Files in User Space (fuse) flags will go here
    
        // Print out the relative PATH of the linked file
        linkTask.get().doLast {
            def fullXPath = linkedFile.getAsFile().get().toString()
            def cwd = System.getProperty("user.dir")
            def prefixLength = cwd.length() + 1 // for last slash
            def relativeXPath = fullXPath.substring(prefixLength)
            println relativeXPath
        }

        // Print path from cwd to the INSTALLED executable file
        installTask.get().doLast {
            def xName = executableFile.getAsFile().get().getName()
            // println xName
            def fullXPath =
                installDirectory.getAsFile().get().toString() + "/" + xName
            if (os.contains("Windows"))  {
                if (xName.contains(".exe") || xName.contains(".bat")) {
                    xName = xName.dropRight(4)
                }
                fullXPath =
                installDirectory.getAsFile().get().toString() + "\\" + xName
            }
            def cwd = System.getProperty("user.dir")
            def prefixLength = cwd.length() + 1 // for last slash
            def relativeXPath = fullXPath.substring(prefixLength)
            println relativeXPath
        }
    }
}
